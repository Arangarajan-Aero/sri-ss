variables:
  BUILD_CONFIGURATION: 'Release'
  DOTNET_VERSION: '8.0'
  WEB_RELEASE_FOLDER: 'Web/bin/Release/net8.0-windows'
  DATALAYER_RELEASE_FOLDER: 'DataLayer/bin/Release/net8.0-windows'
  DEPLOY_FOLDER: 'D:/GitlabCI/Projects/StatusCenter/Builds'
  DEPLOY_TARGET: "https://statuscenter-dev.essinc.com"
  PUBLISH_PROFILE: "Web/Properties/PublishProfiles/FolderProfile.pubxml"
  SONAR_HOST_URL: "https://sonarcloud.io"
  SONAR_TOKEN: "9ba3eb2349b692a492bc60212bfafe3e326fc5a9"

include:
  - template: Jobs/Code-Quality.gitlab-ci.yml

stages:
  - lint
  - build
  - owasp
  - sonarqube
  - quality_and_tests
  - deploy
  - validate_deployment
  - dast

before_script:
  - echo "Setting up environment for .NET 8 build using PowerShell"

lint:
  stage: lint
  tags:
    - windows
  script:
    - echo "Running .NET format to check code style and formatting..."
    - dotnet format --verify-no-changes Web/Web.csproj --report lint-report.html || echo "Linting issues detected."
  allow_failure: true
  artifacts:
    paths:
      - lint-report.html
    expire_in: 1 week
    name: "Lint Report"

build:
  stage: build
  tags:
    - windows
  script:
    - echo "Checking .NET SDK version..."
    - dotnet --info
    - echo "Restoring dependencies for the project..."
    - dotnet restore Web/Web.csproj --configfile ./nuget.config
    - echo "Building the project in $BUILD_CONFIGURATION mode..."
    - dotnet build Web/Web.csproj --configuration $BUILD_CONFIGURATION
  artifacts:
    paths:
      - Web/bin/Release/net8.0/
    expire_in: 1 week

owasp_scan:
  stage: owasp
  image:
    name: owasp/dependency-check:latest
    entrypoint: [""]
  script:
    - echo "Starting OWASP Dependency-Check scan..."
    - >
      /usr/share/dependency-check/bin/dependency-check.sh --scan ./ --format "ALL"
      --project "$CI_PROJECT_NAME" --out ./owasp-report
  allow_failure: true
  artifacts:
    when: always
    paths:
      - "./owasp-report/dependency-check-report.json"
    expire_in: 1 week

sonarqube:
  stage: sonarqube
  tags:
    - windows
  dependencies:
    - build
    - owasp_scan
  script:
    - echo "Starting SonarQube scan..."
    - dotnet tool install --global dotnet-sonarscanner
    - dotnet sonarscanner begin /k:Sri.paluvatla_status-center \
        /d:sonar.login=$SONAR_TOKEN \
        /d:sonar.host.url=$SONAR_HOST_URL \
        /d:sonar.organization="ess-software" \
        /d:sonar.dependencyCheck.reportPath="./owasp-report/dependency-check-report.xml"
    - dotnet build Web/Web.csproj --configuration $BUILD_CONFIGURATION
    - dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
    - echo "Pushing OWASP report to SonarQube..."
    - sonar-scanner \
        -Dsonar.projectKey="Sri.paluvatla_status-center" \
        -Dsonar.host.url="$SONAR_HOST_URL" \
        -Dsonar.login="$SONAR_TOKEN" \
        -Dsonar.dependencyCheck.reportPaths="./dependency-check-reports/dependency-check-report.json"
  allow_failure: true

code_quality:
  stage: quality_and_tests
  tags:
    - windows
  dependencies:
    - build
  script:
    - echo "Analyzing code quality..."
    - powershell -Command "& { ./scripts/format-results.ps1 -InputFile 'build.log' -OutputFile 'gl-code-quality-report.json' }"
  artifacts:
    paths:
      - gl-code-quality-report.json
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week

dependency_scan:
  stage: quality_and_tests
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  dependencies:
    - build
  script:
    - >
      /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL
      --project "$CI_PROJECT_NAME" --failOnCVSS 0
  allow_failure: true
  artifacts:
    when: always
    paths:
      - "./dependency-check-report.html"
      - "./dependency-check-report.json"

test:
  stage: quality_and_tests
  tags:
    - windows
  dependencies:
    - build
  script:
    - dotnet test --results-directory $CI_PROJECT_DIR/cobertura --collect:"XPlat Code Coverage" --test-adapter-path:. --logger:"junit;LogFilePath=$CI_PROJECT_DIR/artifacts/{assembly}-test.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
    - cp $CI_PROJECT_DIR/cobertura/*/coverage.cobertura.xml $CI_PROJECT_DIR/cobertura/coverage.cobertura.xml
    - dotnet tool install -g dotnet-reportgenerator-globaltool
    - reportgenerator -reports:"$CI_PROJECT_DIR/cobertura/coverage.cobertura.xml" -targetdir:"$CI_PROJECT_DIR/coveragereport" -reporttypes:"Html"
    - tar -cvf $CI_PROJECT_DIR/coveragereport.tar -C $CI_PROJECT_DIR coveragereport
  artifacts:
    paths:
      - $CI_PROJECT_DIR/artifacts/*.xml
      - $CI_PROJECT_DIR/cobertura/coverage.cobertura.xml
      - $CI_PROJECT_DIR/coveragereport.tar
    reports:
      junit:
        - $CI_PROJECT_DIR/artifacts/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $CI_PROJECT_DIR/cobertura/coverage.cobertura.xml
    expire_in: 1 week

deploy:
  stage: deploy
  tags:
    - windows
  script:
    - "echo 'Setting up environment for IIS deployment using Windows Authentication...'"
    - "powershell -ExecutionPolicy Bypass -File ./scripts/check-admin.ps1"
    - "echo 'Checking for publish profile at $Env:PUBLISH_PROFILE...'"
    - "powershell -Command \"if (!(Test-Path $Env:PUBLISH_PROFILE)) { Write-Error 'Publish profile not found at $Env:PUBLISH_PROFILE!' ; exit 1 }\""
    - "echo 'BUILD_CONFIGURATION: $Env:BUILD_CONFIGURATION'"
    - "echo 'Deploying using dotnet publish with MSDeploy and Windows Authentication...'"
    - "dotnet publish Web/Web.csproj -p:PublishProfile=$Env:PUBLISH_PROFILE -p:UserName=$Env:IIS_USERNAME -p:Password=$Env:IIS_PASSWORD -c $BUILD_CONFIGURATION"
  only:
    - majorpaynepoc_dotnet8

dast:
  stage: dast
  image: registry.gitlab.com/gitlab-org/security-products/dast:latest
  variables:
    DAST_WEBSITE: $DEPLOY_TARGET
    DAST_SKIP_TARGET_CHECK: "true"
    DAST_FULL_SCAN_ENABLED: "true"
  script:
    - echo "Running DAST scan against $DAST_WEBSITE..."
    - /analyze
  allow_failure: true
  artifacts:
    reports:
      dast: gl-dast-report.json
    expire_in: 1 week

validate_deployment:
  stage: validate_deployment
  tags:
    - windows
  script:
    - echo "Validating deployment using curl..."
    - powershell -Command "curl.exe -o response.txt -s -w '%{http_code}' $Env:DEPLOY_TARGET"
    - powershell -Command "$status=(Invoke-WebRequest -Uri $Env:DEPLOY_TARGET -UseBasicParsing); $status.StatusCode | Out-File response.txt"

    
                                     Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100 29.1M  100 29.1M    0     0  18.4M      0  0:00:01  0:00:01 --:--:-- 76.4M
$ powershell -Command "Expand-Archive -Path dependency-check.zip -DestinationPath dependency-check"
$ echo "Running OWASP Dependency-Check..."
Running OWASP Dependency-Check...
$ dependency-check\bin\dependency-check.bat --scan . --format SARIF --out ${DC_OUTPUT} --project "StatusCenter"
dependency-check\bin\dependency-check.bat: 
Line |
 337 |  dependency-check\bin\dependency-check.bat --scan . --format SARIF --o â€¦
     |  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     | The module 'dependency-check' could not be loaded. For more information, run 'Import-Module dependency-check'.

Uploading artifacts for failed job
00:01
Version:      17.5.3
Git revision: 12030cf4
Git branch:   17-5-stable
GO version:   go1.22.7
Built:        2024-10-31T20:31:10+0000
OS/Arch:      windows/amd64
Uploading artifacts...
Runtime platform                                    arch=amd64 os=windows pid=9048 revision=12030cf4 version=17.5.3
WARNING: dependency-check-report.json: no matching files. Ensure that the artifact path is relative to the working directory (C:\Gitlab-Runner\builds\t3_r1sLWH\0\ess-software\status-center) 
ERROR: No files to upload                          

Cleaning up project directory and file based variables
00:01
ERROR: Job failed: exit status 1
